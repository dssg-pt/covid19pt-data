name: Extract and validate DGS data (from downloaded PDF file)

on:
  pull_request:
    branches:
      - master

jobs:
  build:
    if: startsWith(github.head_ref, 'dados')
    runs-on: ubuntu-latest
    container: python:3.7

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}
      - name: Configure pt_PT locale
        run: |
          apt-get update -y && apt-get install -y locales && echo "pt_PT.UTF-8 UTF-8" | tee -a /etc/locale.gen && locale-gen pt_PT.UTF-8
      - name: Configure pt_PT (Europe/Lisbon) timezone
        run: |
          ln -fs /usr/share/zoneinfo/Europe/Lisbon /etc/localtime && dpkg-reconfigure --frontend noninteractive tzdata
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r .github/workflows/requirements.txt
      - name: Scrap the report link from the DGS website
        run: | 
          python .github/workflows/Web_Scrapper_DGS.py
      - name: Download PDF
        run: | 
          wget -c -P .github/workflows/ $(cat .github/report_link.txt)
      - name: Process PDF
        run: | 
          python .github/workflows/process_report.py
      - name: Run data extraction
        run: | 
          python .github/workflows/extract_data_arcgis.py
      - name: Update data about test samples
        run: | 
          python .github/workflows/update_amostras.py
        if: always()
      - name: Extract municipality data from arcgis
        run: | 
          python .github/workflows/extract_dados_concelhos.py
        if: always()
      - name: Add new PDF file to Git repo (it's the only addition to the reports folder)
        run: |
          git add -A dgs-reports-archive/
      - name: Commit all changes
        uses: stefanzweifel/git-auto-commit-action@v4.1.1
        with:
          commit_message: Update data for today 
          branch: ${{ github.head_ref }}
        if: always()
      - name: Validate data with pytest
        run: pytest tests/test_dgs_data.py -s -vv --junitxml=tests/junit/test-results.xml
        if: always()
      - name: Validate data about test samples with pytest
        run: pytest tests/test_amostras.py -s -vv --junitxml=tests/junit/test-amostras-results.xml
        if: always()
      - name: Validate data about municipalities with pytest
        run: pytest tests/test_concelhos.py -s -vv --junitxml=tests/junit/test-concelhos-results.xml
        if: always()
      #- name: Auto publish to Twitter
      #  run: python .github/workflows/tweet.py
      #  env:
      #      TWITTER_ACCESS_TOKEN: ${{ secrets.TWITTER_ACCESS_TOKEN }}
      #      TWITTER_ACCESS_SECRET: ${{ secrets.TWITTER_ACCESS_SECRET }}
      #     TWITTER_CONSUMER_KEY: ${{ secrets.TWITTER_CONSUMER_KEY }}
      #      TWITTER_CONSUMER_SECRET: ${{ secrets.TWITTER_CONSUMER_SECRET }}
      - name: Upload pytest test results
        uses: actions/upload-artifact@master
        with:
          name: pytest-results
          path: tests/junit/test-results.xml
        if: always()
      - name: Upload pytest samples test results 
        uses: actions/upload-artifact@master
        with:
          name: pytest-amostras-results
          path: tests/junit/test-amostras-results.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: always()
      - name: Upload pytest municipalities test results 
        uses: actions/upload-artifact@master
        with:
          name: pytest-municipalities-results
          path: tests/junit/test-concelhos-results.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: always()
